{"version":3,"sources":["../../robofriends/src/components/Card.js","../../robofriends/src/components/CardList.js","../../robofriends/src/components/SearchBox.js","../../robofriends/src/components/Scroll.js","../../robofriends/src/components/ErrorBoundary.js","../../robofriends/src/containers/App.js","../../robofriends/src/config.js","../../robofriends/src/actions.js","../../robofriends/src/constants.js","../../robofriends/src/reducers.js","../../robofriends/src/serviceWorker.js","../../robofriends/src/index.js"],"names":["Card","props","react_default","a","createElement","className","style","width","height","src","concat","flag","alt","name","color","fontFamily","location","capital","population","CardList","_ref","robots","map","user","i","components_Card","key","id","region","currency","SearchBox","searchField","searchChange","type","placeholder","onChange","scrollStyle","overflow","border","Scroll","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","Component","App","countries","_this2","fetch","then","res","json","data","setState","catch","err","console","log","_this$props","onSearchChange","filteredRobots","filter","country","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","dispatch","event","payload","target","value","initialState","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c76ebbb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div\r\n      className=\" tc bg-light-green pa3 dib br3 ma3 grow bw2 shadow-5 \"\r\n      style={{ width: \"19rem\", height: \"22rem\" }}\r\n    >\r\n      <img\r\n        src={`${props.flag}`}\r\n        alt=\"robots \"\r\n        style={{ width: \"4rem\", height: \"40px\" }}\r\n      />\r\n      <br />\r\n      <div>\r\n        <h2>\r\n          Country Name: <span>{props.name}</span>\r\n        </h2>\r\n        <h2 style={{ color: \"green\", fontFamily: \"Cabin, sans-serif\" }}>\r\n          Location: {props.location}\r\n        </h2>\r\n        <h3>\r\n          Capital : <span style={{ color: \"green\" }}>{props.capital}</span>\r\n        </h3>\r\n        <h3>\r\n          Population :{\" \"}\r\n          <span style={{ color: \"tomato\" }}>{props.population} (Est.)</span>\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../components/Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={robots[i].name}\r\n            id={robots[i].name}\r\n            name={robots[i].name}\r\n            flag={robots[i].flag}\r\n            location={robots[i].region}\r\n            capital={robots[i].capital}\r\n            population={robots[i].population}\r\n            currency={robots[i].currency}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchField,searchChange}) => {\r\n    return (\r\n      <div className=\"pa2\">\r\n        <input\r\n          className=\"pa3 ba b--green  bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"Search for robot\"\r\n          onChange = {searchChange}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={scrollStyle}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst scrollStyle = {\r\n    overflow: 'scroll',\r\n    border: '2px solid #000',\r\n    height: '70vh'\r\n}\r\n\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            hasError: false\r\n         }\r\n\r\n        \r\n    }\r\n    render() { \r\n        if(this.state.hasError){\r\n            return <h1> OOOOPs That's not Good.</h1>\r\n        }\r\n        return(\r\n            this.props.children\r\n        )\r\n        \r\n    }\r\n}\r\n \r\nexport default ErrorBoundary;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList.js\";\r\n//import { robots} from './robots'\r\nimport SearchBox from \"../components/SearchBox.js\";\r\nimport { connect } from \"react-redux\";\r\nimport Scroll from \"../components/Scroll.js\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\nimport { API_URL } from \"../config\";\r\nimport { setSearchField } from \"../actions\";\r\n\r\n//define connect parameters\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchField\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value))\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      countries: []\r\n    };\r\n  }\r\n\r\n  //for Robofriends\r\n  /* componentDidMount() {\r\n    //console.log(this.props.store.getState());\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(user => this.setState({ robots: user }));\r\n  } */\r\n\r\n  componentDidMount() {\r\n    fetch(`${API_URL}`)\r\n      .then(res => res.json())\r\n      .then(data =>\r\n        this.setState({\r\n          countries: data\r\n        })\r\n      )\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    //in the props we used robots instead of countries, we would fix that as soon as possible\r\n    //so robots in the props is equal to countries\r\n    const { countries } = this.state;\r\n    const { searchField, onSearchChange } = this.props;\r\n    const filteredRobots = this.state.countries.filter(country => {\r\n      return country.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return !countries.length ? (\r\n      <h1>Loading.........</h1>\r\n    ) : (\r\n      <div className=\"tc scroll-type\">\r\n        <h1 className=\"f1\">We Countries</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","export const API_URL = \"https://restcountries.eu/rest/v2/all\";\r\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\n/* const fetchItems = url => {\r\n  return fetch(url)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      return data;\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\nconst result = fetchItems(\"https://restcountries.eu/rest/v2/all\"); */\r\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\r\n\r\nconst initialState = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  console.log(\"reduceers State===== \", state, action.type);\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"../src/containers/App\";\nimport \"tachyons\";\nimport { searchRobots } from \"./reducers\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}