{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/Spinner.js","containers/App.js","actions.js","constants.js","config.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","style","src","concat","flag","alt","width","height","name","color","fontFamily","location","capital","population","CardList","_ref","robots","map","user","i","components_Card","key","id","region","currency","SearchBox","searchField","searchChange","type","placeholder","onChange","scrollStyle","overflow","border","Scroll","children","ErrorBoundary","_useState","useState","_useState2","Object","slicedToArray","hasError","Spinner","App","this","onRequestCountries","_this$props","onSearchChange","countries","isPending","filteredRobots","err","filter","country","toLowerCase","includes","src_containers_Spinner","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","Component","connect","state","searchRobots","requestCountries","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","initialStateSearch","initialStateCountries","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.829fa830.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div\r\n      className=\" tc bg-light-green pa3 dib br3 ma3 grow bw2 shadow-5 pv4\"\r\n      style={{}}\r\n    >\r\n      <img\r\n        src={`${props.flag}`}\r\n        alt=\"robots \"\r\n        style={{ width: \"4rem\", height: \"40px\" }}\r\n      />\r\n      <br />\r\n      <div>\r\n        <h2>\r\n          Country Name: <span>{props.name}</span>\r\n        </h2>\r\n        <h2 style={{ color: \"green\", fontFamily: \"Cabin, sans-serif\" }}>\r\n          Location: {props.location}\r\n        </h2>\r\n        <h3>\r\n          Capital : <span style={{ color: \"green\" }}>{props.capital}</span>\r\n        </h3>\r\n        <h3>\r\n          Population :{\" \"}\r\n          <span style={{ color: \"tomato\" }}>{props.population} (Est.)</span>\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../components/Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={robots[i].name}\r\n            id={robots[i].name}\r\n            name={robots[i].name}\r\n            flag={robots[i].flag}\r\n            location={robots[i].region}\r\n            capital={robots[i].capital}\r\n            population={robots[i].population}\r\n            currency={robots[i].currency}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green  bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search for Country\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={scrollStyle}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst scrollStyle = {\r\n    overflow: 'scroll',\r\n    border: '2px solid #000',\r\n    height: '70vh'\r\n}\r\n\r\n\r\n\r\nexport default Scroll;","import React, { useState } from \"react\";\r\n\r\nconst ErrorBoundary = ({ children }) => {\r\n  const [hasError, sethasError] = useState(false);\r\n  return hasError ? <h1> OOOOPs That's not Good.</h1> : children;\r\n};\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div id=\"body\">\r\n      <div className=\"lds-roller\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList.js\";\r\n//import { robots} from './robots'\r\nimport SearchBox from \"../components/SearchBox.js\";\r\nimport { connect } from \"react-redux\";\r\nimport Scroll from \"../components/Scroll.js\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField, requestCountries } from \"../actions\";\r\nimport Spinner from \"./Spinner\";\r\n\r\n//define connect parameters\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    countries: state.requestCountries.countries,\r\n    isPending: state.requestCountries.isPending,\r\n    err: state.requestCountries.err,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestCountries: () => dispatch(requestCountries()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  //for Robofriends\r\n  /* componentDidMount() {\r\n    //console.log(this.props.store.getState());\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(user => this.setState({ robots: user }));\r\n  } */\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestCountries();\r\n  }\r\n\r\n  render() {\r\n    //in the props we used robots instead of countries, we would fix that as soon as possible\r\n    //so robots in the props is equal to countries\r\n\r\n    const {\r\n      searchField,\r\n      onSearchChange,\r\n      countries,\r\n      isPending,\r\n      err,\r\n    } = this.props;\r\n\r\n    const filteredRobots = countries.filter((country) => {\r\n      return country.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <Spinner />\r\n    ) : (\r\n      <div className=\"tc scroll-type\">\r\n        <h1 className=\"f1\">We Countries</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_COUNTRIES_PENDING,\r\n  REQUEST_COUNTRIES_FAILED,\r\n  REQUEST_COUNTRIES_SUCCESS,\r\n} from \"./constants\";\r\n\r\nimport { API_URL } from \"./config\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestCountries = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_COUNTRIES_PENDING });\r\n  fetch(`${API_URL}`)\r\n    .then((res) => res.json())\r\n    .then((data) =>\r\n      dispatch({ type: REQUEST_COUNTRIES_SUCCESS, payload: data })\r\n    )\r\n    .catch((err) => dispatch({ type: REQUEST_COUNTRIES_FAILED, payload: err }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\n/* const fetchItems = url => {\r\n  return fetch(url)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      return data;\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\nconst result = fetchItems(\"https://restcountries.eu/rest/v2/all\"); */\r\n\r\nexport const REQUEST_COUNTRIES_PENDING = \"REQUEST_COUNTRIES_PENDING\";\r\nexport const REQUEST_COUNTRIES_SUCCESS = \"REQUEST_COUNTRIES_SUCCESS\";\r\nexport const REQUEST_COUNTRIES_FAILED = \"REQUEST_COUNTRIES_FAILED\";\r\n","export const API_URL = \"https://restcountries.eu/rest/v2/all\";\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_COUNTRIES_PENDING,\r\n  REQUEST_COUNTRIES_FAILED,\r\n  REQUEST_COUNTRIES_SUCCESS,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\nconst initialStateCountries = {\r\n  isPending: false,\r\n  countries: [],\r\n  err: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestCountries = (\r\n  state = initialStateCountries,\r\n  action = {}\r\n) => {\r\n  switch (action.type) {\r\n    case REQUEST_COUNTRIES_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_COUNTRIES_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        countries: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_COUNTRIES_FAILED:\r\n      return Object.assign({}, state, {\r\n        err: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"../src/containers/App\";\nimport \"tachyons\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { logger } from \"redux-logger\";\nimport { searchRobots, requestCountries } from \"./reducers\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({ searchRobots, requestCountries });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}